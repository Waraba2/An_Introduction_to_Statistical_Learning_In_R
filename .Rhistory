View(peaks)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(term, desc(proportion), year) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
top_n(1)
View(peaks)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(term, desc(proportion), year) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
select(term, peak_year, peak_proportion)
View(joined_year_and_total_counts)
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term")
View(computes_half_lifes)
View(computes_half_lifes)
View(computes_half_lifes)
View(peaks)
top_n(1)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(desc(proportion)) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
select(term, peak_year, peak_proportion)
top_n(1)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(desc(proportion)) %>%
top_n(1) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
select(term, peak_year, peak_proportion)
View(peaks)
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term")
View(computes_half_lifes)
View(computes_half_lifes)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(desc(proportion)) %>%
top_n(1) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
select(term, peak_year, peak_proportion) %>%
filter(year >= 1550)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(desc(proportion)) %>%
top_n(1) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
filter(year >= 1550)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(desc(proportion)) %>%
top_n(1) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
select(term, peak_year, peak_proportion) %>%
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(desc(proportion)) %>%
top_n(1) %>%
rename(peak_year = year   ,  peak_proportion = proportion) %>%
select(term, peak_year, peak_proportion)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(desc(proportion)) %>%
top_n(1) %>%
rename(peak_year = year,  peak_proportion = proportion) %>%
select(term, peak_year, peak_proportion)
View(peaks)
View(computes_half_lifes)
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term")
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term") %>%
filter(proportion <= peak_prop / 2)
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term") %>%
filter(proportion <= peak_proportion / 2)
View(computes_half_lifes)
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term") %>%
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term") %>%
filter(proportion <= peak_proportion / 2) %>%
top_n(1, year)
library(here)
library(scales)
library(tidyverse)
theme_set(theme_bw())
knitr::opts_chunk$set(echo = TRUE)
year_counts <- read.delim(here("week3/ngrams/year_counts.tsv"), header=FALSE, sep="\t", col.names = c("term", "year", "volume", "book_count" )) %>%
mutate(term=as.character(term))
total_counts <- read.delim(here("week3/ngrams/total_counts.csv"), skip = 1, header=FALSE, sep=",", col.names = c("year", "total_volume", "page_count", "book_count" ))
joined_year_and_total_counts <- left_join(year_counts, total_counts, by="year") %>%
mutate(proportion = volume/total_volume)
joined_year_and_total_counts %>%
filter(term %in% c("1883", "1910", "1950"), year >= 1850, year <= 2012 ) %>%
ggplot(aes(x=year, y=proportion, color=term)) +
geom_line() +
scale_y_continuous(labels=scales::percent)
peaks <- joined_year_and_total_counts %>%
group_by(term) %>%
arrange(desc(proportion)) %>%
top_n(1) %>%
rename(peak_year = year,  peak_proportion = proportion) %>%
select(term, peak_year, peak_proportion)
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term") %>%
filter(proportion <= peak_proportion / 2) %>%
top_n(1, year)
View(computes_half_lifes)
View(computes_half_lifes)
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term") %>%
filter(proportion - peak_year / 2 <= 0) %>%
top_n(1, year)
computes_half_lifes <- left_join(joined_year_and_total_counts, peaks, by="term") %>%
filter(proportion - peak_year / 2 <= 0) %>%
top_n(1, year)
View(computes_half_lifes)
View(computes_half_lifes)
(computes_half_lifes %>%
group_by(term) )
View(computes_half_lifes)
View(computes_half_lifes)
(computes_half_lifes %>%
group_by(year))
ggplot(computes_half_lifes, aes(x = year, y = term)) +
geom_smooth()
ggplot(computes_half_lifes, aes(x = year, y = term)) +
group_by(term)
plot_half_lifes <- computes_half_lifes %>%
group_by(term) %>%
ggplot(plot_half_lifes, aes(x = year, y = term)) +
geom_smooth()
plot_half_lifes <- computes_half_lifes %>%
group_by(term) %>%
ggplot(plot_half_lifes, aes(x = year, y = term)) +
geom_smooth()
plot_half_lifes <- computes_half_lifes %>%
group_by(term) %>%
ggplot(aes(x = year, y = term)) +
geom_smooth()
plot_half_lifes <- computes_half_lifes %>%
group_by(term) %>%
ggplot(aes(x = year, y = term)) +
geom_smooth()
plot_half_lifes <- computes_half_lifes %>%
group_by(term)
View(plot_half_lifes)
plot_half_lifes <- computes_half_lifes %>%
group_by(term, year)
View(plot_half_lifes)
View(plot_half_lifes)
ggplot(aes(x = year, y = proportion)) +
geom_smooth()
ggplot(computes_half_lifes, aes(x = year, y = proportion)) +
geom_smooth()
# Exercises
# 1. Currently dep_time and sched_dep_time are convenient to look at, but hard
# to compute with because they’re not really continuous numbers. Convert them
# to a more convenient representation of number of minutes since midnight.
fligths
# Exercises
# 1. Currently dep_time and sched_dep_time are convenient to look at, but hard
# to compute with because they’re not really continuous numbers. Convert them
# to a more convenient representation of number of minutes since midnight.
flights
# Exercises
# 1. Currently dep_time and sched_dep_time are convenient to look at, but hard
# to compute with because they’re not really continuous numbers. Convert them
# to a more convenient representation of number of minutes since midnight.
?flights
setwd("~/R_for_Data_Science/playground")
# Exercises
# 1. Currently dep_time and sched_dep_time are convenient to look at, but hard
# to compute with because they’re not really continuous numbers. Convert them
# to a more convenient representation of number of minutes since midnight.
?flights
# Exercises
# 1. Currently dep_time and sched_dep_time are convenient to look at, but hard
# to compute with because they’re not really continuous numbers. Convert them
# to a more convenient representation of number of minutes since midnight.
?flights
# 2. Compare air_time with arr_time - dep_time. What do you expect to see? What
# 2. Compare air_time with arr_time - dep_time. What do you expect to see? What
# PREREQUESITS:
library(nycflights13)
library(tidyverse)
# FASMSG:
# FILTERING ROWS WITH filter().
filter(flights, month == 1, day == 1)
# dyplr never modifies its data if you want to save your changes, do this:
jan1 <- filter(flights, month == 1, day == 1)
# R either print out the result or save it in a variable. To do both wrap the
# assignment in a parenthesis.
(dec25 <- filter(flights, month == 12, day == 25))
# COMPARISONS:
# R provides the standard suite: >, >=, <, <=, != (not equal), and == (equal).
# Avoid newbie mistake of doing this:
filter(flights, month = 1)
# PREREQUESITS:
library(nycflights13)
library(tidyverse)
?flights
fights
flights
# Exercises
# 1. Currently dep_time and sched_dep_time are convenient to look at, but hard
# to compute with because they’re not really continuous numbers. Convert them
# to a more convenient representation of number of minutes since midnight.
flights_time <- mutate(flights,
dep_time_mins = (dep_time %/% 100 * 60 + dep_time %% 100) %% 1440,
sche_dep_time_mins = (sched_dep_time %% 100 * 60 +
sche_dep_time %% 100) %% 1440)
# Exercises
# 1. Currently dep_time and sched_dep_time are convenient to look at, but hard
# to compute with because they’re not really continuous numbers. Convert them
# to a more convenient representation of number of minutes since midnight.
flights_time <- mutate(flights,
dep_time_mins = (dep_time %/% 100 * 60 + dep_time %% 100) %% 1440,
sche_dep_time_mins = (sched_dep_time %% 100 * 60 +
sched_dep_time %% 100) %% 1440)
# Select only relevant column.
select(
flights_time, dep_time, dep_time_mins, sched_dep_time, sched_dep_mins
)
# Select only relevant column.
select(
flights_time, dep_time, dep_time_mins, sched_dep_time, sched_dep_time_mins
)
# Exercises
# 1. Currently dep_time and sched_dep_time are convenient to look at, but hard
# to compute with because they’re not really continuous numbers. Convert them
# to a more convenient representation of number of minutes since midnight.
flights_time <- mutate(flights,
dep_time_mins = (dep_time %/% 100 * 60 + dep_time %% 100) %% 1440,
sched_dep_time_mins = (sched_dep_time %% 100 * 60 +
sched_dep_time %% 100) %% 1440)
# Select only relevant column.
select(
flights_time, dep_time, dep_time_mins, sched_dep_time, sched_dep_time_mins
)
time2mins <- function(x) {
(x %/% 100 * 60 + x %% 100) %% 1440
}
flights_time_2 <- mutate(flights,
dep_time_mins = time2mins(dep_time),
sched_dep_time_mins = time2mins(sched_dep_time))
# Select only relevant column.
select(
flights_time_2, dep_time, dep_time_mins, sched_dep_time, sched_dep_time_mins
)
# 2. Compare air_time with arr_time - dep_time. What do you expect to see? What
# do you see? What do you need to do to fix it?
fights_airtime <- mutate(flights,
dep_time = time2mins(dep_time),
arr_time = time2mins(arr_time),
air_time_diff = air_time - arr_time + dep_time
)
nrow(filter(flights_airtime, air_time_diff != 0))
# 2. Compare air_time with arr_time - dep_time. What do you expect to see? What
# do you see? What do you need to do to fix it?
flights_airtime <- mutate(flights,
dep_time = time2mins(dep_time),
arr_time = time2mins(arr_time),
air_time_diff = air_time - arr_time + dep_time
)
nrow(filter(flights_airtime, air_time_diff != 0))
# 4. Find the 10 most delayed flights using a ranking function. How do you want
# to handle ties? Carefully read the documentation for min_rank().
ggplot(flights_airtime, aes(x = air_time_diff)) +
geom_histogram(binwidth = 1)
# 3. Compare dep_time, sched_dep_time, and dep_delay. How would you expect those
# three numbers to be related?
flights_deptime <-
mutate(flights,
dep_time_min = time2mins(dep_time),
sched_dep_time_min = time2mins(sched_dep_time),
dep_delay_diff = dep_delay - dep_time_min + sched_dep_time_min)
filter(flights_deptime, dep_delay_diff != 0)
ggplot(
filter(flights_deptime, dep_delay_diff > 0),
aes(y = sche_dep_time_min, x = dep_delay_diff)
)
ggplot(
filter(flights_deptime, dep_delay_diff > 0),
aes(y = sched_dep_time_min, x = dep_delay_diff)
)
ggplot(
filter(flights_deptime, dep_delay_diff > 0),
aes(y = sched_dep_time_min, x = dep_delay_diff)
)
flights_deptime <-
mutate(flights,
dep_time_min = time2mins(dep_time),
sched_dep_time_min = time2mins(sched_dep_time),
dep_delay_diff = dep_delay - dep_time_min + sched_dep_time_min)
filter(flights_deptime, dep_delay_diff != 0)
ggplot(
filter(flights_deptime, dep_delay_diff > 0),
aes(y = sched_dep_time_min, x = dep_delay_diff)
)
ggplot(
filter(flights_deptime, dep_delay_diff > 0),
aes(y = sched_dep_time_min, x = dep_delay_diff)
) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
# Using the function concatenate to get a vector
x <- c(1, 3, 2, 5)
x
x = c(1, 6, 2)
x
# Using the function concatenate to get a vector
x <- c(1, 3, 2, 5)
x
# Assagning things using the = operator.
x = c(1, 6, 2)
x
y = c(1, 4, 3)
# Hitting the up arrow will show you the previous command you ran.
# We can add two vectors, but they have to be the same length.
length(x)
lebght(y)
length(y)
x + y
# Using the function concatenate to get a vector
x <- c(1, 3, 2, 5)
x
# Assagning things using the = operator.
x = c(1, 6, 2)
x
y = c(1, 4, 3)
# Hitting the up arrow will show you the previous command you ran.
# We can add two vectors, but they have to be the same length.
length(x)
length(y)
x + y
# Try using arrays of different length.
z = c(5, 4, 9, 1)
x + z
# ls() function allows us allows us to see the objects we have so far and rm() is
# for removing those objects.
ls()
rm(x, y)
ls()
rm(x, y, z)
ls()
x <- c(1, 3, 2, 5)
# Assagning things using the = operator.
x = c(1, 6, 2)
# It is also possible to remove all objects at once.
rm(list = ls())
# We also have the matrix function which allows us to make matix of numbers:
?matrix # To learn more about matrix
# It has many arguments but we want to focus on the first three(data or entries,
# number of rows, number of columns).
x <- matrix(data = c(1, 2, 3, 4), nrow = 2, ncol = 2)
x
# we can ommit ( data , nrow and ncol)
x <- matrix(c(1, 2, 3, 4), 2, 2)
# It is sometimes useful to use the name because R expect the arguments to be passed in the same order in the help.
matrix(c(1, 2, 3, 4), 2, 2, byrow = TRUE)
# The sqrt() returns the square root of each items in the matrix, and x^2 squares eanch item.
sqrt(x)
x^2
cor(x, y)
x <- rnorm(50)
y <- rnorm(50, mean = 50, sd = .1)
cor(x, y)
x <- rnorm(50)
y <- rnorm(50, mean = 50, sd = .1)
x
y
cor(x, y)
set.seed(1303)
rnorm(50)
rnorm(50)
rnorm(50)
rnorm(50)
set.seed(1303)
rnorm(50)
set.seed(1303)
rnorm(50)
set.seed(1303)
rnorm(50)
set.seed(3)
y <- rnorm(100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
# In oder to plot we use the plot() function, using plot(x, y) makes a scatter plot fo x versus y. Using the xlab arguments allows us to set the x label of the plot.
?plot # To learn more about plots.
plot(x, y, xlab = "this is the x-axis",
ylab = "this is the y-axis",
main = "Plot of X versus Y")
x <- rnorm(100)
y <- rnorm(100)
plot(x, y)
plot(x, y, xlab = "this is the x-axis",
ylab = "this is the y-axis",
main = "Plot of X versus Y")
dev.off()
pdf("Figure.pdf")
plot(x, y, col
pdf("Figure.pdf")
plot(x, y, col = "green")
dev.off()
pdf("Figure.pdf")
plot(x, y, col = "green")
dev.off()
setwd("C:/Users/hamidou/Documents/R_for_Data_Science/playground")
pdf("Figure.pdf")
plot(x, y, col = "green")
dev.off()
setwd("C:/Users/hamidou/Documents/An_Introduction_to_Statistical_Learning_In_R")
pdf("Figure.pdf")
plot(x, y, col = "green")
dev.off()
# The function seq(a, b) is used to make sequences of numbers between a and b.
# another option is seq(0, 1, length = 10) make a sequence of 10 numbers that are
# equally spaced between 0 and 1. Typing 3:11 is short for seq(3, 11)
x <- seq(1, 10)
x
x <- 1:10
x
x <- seq(-pi, pi, length = 50)
x
# To create more sophisticated plots we use the contour() function which allows us
# to plot 3-dimentional data. It take three arguments like a topographical map.
# ( a vector of x values for the first dimension, a vector of y values for the
# second dimension, and a matrix whose elements correcpond to the 3rd dimention for # each pair of (x, y) coordinates).
y <- x
f <- outer(x, y, function(x, y) cos(y) / (1 + x^2))
contour(x, y, f)
contour(x, y, f, nlevels = 45, add = T)
y <- x
f <- outer(x, y, function(x, y) cos(y) / (1 + x^2))
contour(x, y, f)
contour(x, y, f, nlevels = 45, add = T)
contour(x, y, f)
contour(x, y, f, nlevels = 45, add = T)
y <- x
f <- outer(x, y, function(x, y) cos(y) / (1 + x^2))
contour(x, y, f)
contour(x, y, f, nlevels = 45, add = T)
contour(x, y, f)
contour(x, y, f, nlevels = 45, add = T)
y <- x
f <- outer(x, y, function(x, y) cos(y) / (1 + x^2))
contour(x, y, f)
contour(x, y, f, nlevels = 45, add = T)
fa <- (f - t(f)) / 2
fa <- (f - t(f)) / 2
contour(x, y, fa, nlevels - 15)
fa <- (f - t(f)) / 2
contour(x, y, fa, nlevels = 15)
image(x, y, fa)
persp(x, y, fa)
persp(x, y, fa, theta = 30)
persp(x, y, fa, theta = 30, phi = 20)
persp(x, y, fa, theta = 30, phi = 70)
persp(x, y, fa, theta = 30, phi = 40)
A <- matrix(c(1:16, 4, 4))
A
A[2, 3]
# In order to get access to a portion of the data in matrix A we can do this.
A <- matrix(1:16, 4, 4)
A
A[2, 3]
# Select multiple rows and column by passing vectors as the indices.
A[c(1, 2), c(2, 4)]
A[1:3, 3:4]
A[1:3, 2:4]
A[1:2, ]
A[, 1:2]
# The last two select every rows or column because it is not specified. R treats a single row or column of a Matrix as a vector.
A[1, ]
A[-c(1, 3), -c(1, 3, 4)]
A[-c(1, 3), ]
# The dim() prints the number of rows followed by the number of column in agiven
# matrix
dim(A)
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
setwd("C:/Users/hamidou/Documents/R_for_Data_Science/playground")
setwd("C:/Users/hamidou/Documents/An_Introduction_to_Statistical_Learning_In_R")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
setwd("C:/Users/hamidou/Documents/An_Introduction_to_Statistical_Learning_In_R")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
setwd("C:/Users/hamidou/Documents/An_Introduction_to_Statistical_Learning_In_R")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
# We have the read.table() function, which import data into R and the write.table
# function which allows us to export data
Auto <- read.table("Auto.data")
savehistory() # To save all the objects that we made for when we come back
q() # To quit R
